@page "/products"
@using Radzen
@using Radzen.Blazor
@using UseCases

@inject NavigationManager NavigationManager
@inject UseCases.IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject UseCases.IViewProductsUseCase ViewProductsUseCase
@inject UseCases.IDeleteProductUseCase DeleteProductUseCase
@inject DialogService DialogService

<PageTitle>Produtos</PageTitle>

<h1>Produtos</h1>

<p>Cadastro de produtos</p>

@if (products == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="container">
        <div class="row py-2">
            <div class="col">
                <RadzenCard>

                    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@products" TItem="Product" PageSize="5">
                        <Template Context="product">
                            <RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">
                                <div class="container">
                                    <div class="row">
                                        <div class="col-lg-3 p-3 product-title">
                                            @(product.Name)
                                        </div>
                                        <div class="col-lg-7 p-3">
                                            <div class="row d-flex">
                                                <div class="col-md-6 col-lg-2">
                                                    <h5 class="mb-0">Estoque</h5>
                                                    <p class="mb-sm-2 mb-lg-0">@(product.Quantity)</p>
                                                </div>
                                                <div class="col-md-6 col-lg-2">
                                                    <h5 class="mb-0">Categoria</h5>
                                                    <p class="mb-sm-2 mb-lg-0">@(product.CategoryId.HasValue?GetCategoryByIdUseCase.Execute(product.CategoryId.Value)?.Name:"")</p>
                                                </div>
                                                <div class="col-md-6 order-first order-lg-last col-lg-3 text-sm-left text-lg-right mb-3 mb-lg-0">
                                                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Class="price-badge" Text=@($"{product.Price.ToString("c")}") />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-lg-2 p-3">
                                            <RadzenButton Click=@(args => EditProduct(product)) Icon="edit_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
                                            <RadzenButton Click=@(args => DeleteDialog(product)) Icon="delete_circle_outline" ButtonStyle="ButtonStyle.Danger" />
                                        </div>
                                    </div>
                                </div>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>

                </RadzenCard>
            </div>
        </div>
    </div>
}
<br />
<RadzenButton Click=@(args => OnClickAddProduct()) Text="Adicionar Produto" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />

<style>
    .product-title {
        min-height: 72px;
        color: #da0074;
        background-color: rgba(255, 41, 155, .1);
        font-size: 20px;
        font-weight: bold;
        line-height: 20px;
        letter-spacing: -0.02em;
    }

    .price-badge {
        font-size: 16px;
        font-weight: bold;
        line-height: 20px;
        padding: 8px;
    }
</style>

@code {
    private IEnumerable<Product> products = new List<Product>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        products = ViewProductsUseCase.Execute().ToArray();
    }

    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }

    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.ProductId}");
    }

    async Task DeleteDialog(Product product)
    {
        var result = await DialogService.OpenAsync("Excluir", ds =>
            @<div>
                <p Style="margin-bottom: 1rem">Deseja realmente excluir o produto: @product.Name?</p>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenButton Text="Sim" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                        <RadzenButton Text="Não" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
                    </div>
                </div>
            </div>);

        if (result != null && result)
        {
            DeleteProduct(product.ProductId);
        }
    }

    private void DeleteProduct(int productId)
    {
        DeleteProductUseCase.Delete(productId);
        LoadProducts();
    }

    private void LoadProducts()
    {
        products = ViewProductsUseCase.Execute().ToArray();
    }
}


